import json

from aiogram import types
from . app import dp, bot
from . keyboards import inline_kb
from . states import GameStates
from . data_fetcher import get_random
from aiogram.dispatcher import FSMContext
from . messages import MESSAGES
from . states import TestStates, DeskriptionStates
from . utils import GetCurrentState
from . data_fetcher import add_word
from . keyboards import inline_kb_YN
from aiogram.utils.markdown import text, bold, italic, code, pre
from aiogram.types import ParseMode, InputMediaPhoto, InputMediaVideo, ChatActions
import aiogram.utils.markdown as fmt
from emoji import emojize


#–î–µ–ª–∞–µ–º –º–æ–¥—É–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º–µ
#–°–Ω–∞—á–∞–ª–∞ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ
#–ü–æ—Ç–æ–º –∂–¥–µ–º —Å–ª–æ–≤–æ
#–ö–∞–∫ –¥–æ–∂–¥–∞–ª–∏—Å—å –ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ–≤–æ–¥
#–ñ–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥


#–ù–∞ –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Å–∏–º –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FM –≤ –Ω—É–∂–Ω—ã–π —Å—Ç—ç–π—Ç
#'test_state_2': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞. –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å'
@dp.message_handler(state='*', commands=['add_word'])
async def process_add_word_setstate_command(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    #check_state(message, state)
    await state.set_state(TestStates.all()[2]) #'test_state_2': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ —Å–ª–æ–≤–∞—Ä—å',
    await message.reply(MESSAGES['add_word'], reply=False) #TODO: –ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞, –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–∏—Å–∞—Ç—å –∫—É–¥–∞-—Ç–æ

#–ü—Ä–∏–Ω–∏–º–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–µ–π—Ç –≤ –∏–Ω–∏—Ç
#'test_state_0': '–ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏',
@dp.message_handler(state=TestStates.TEST_STATE_2)
async def process_add_word_add_translate_command(message: types.Message, state:FSMContext):
    #await message.reply('–ü–µ—Ä–≤—ã–π!', message.from_user.id, message.text, reply=False)

    async with state.proxy() as data:
        data['word'] = message.text

    await bot.send_message(message.from_user.id, text=emojize('‚û° –í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞!'))

    state = dp.current_state(user=message.from_user.id)
    await state.set_state(TestStates.all()[3]) #'test_state_3': '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞. –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–µ—Ä–µ–≤–æ–¥ —ç—Ç–æ–≥–æ —Å–ª–æ–≤–∞'

@dp.message_handler(state=TestStates.TEST_STATE_3)
async def process_add_word_add_translate_command(message: types.Message, state:FSMContext):
    #await message.reply('–ü–µ—Ä–≤—ã–π!', message.from_user.id, message.text, reply=False)
    #await bot.send_message(message.from_user.id, text = "–í—ã –≤–≤–µ–ª–∏ "+message.text)

    async with state.proxy() as data:
        data['translation_base'] = message.text

    res = await add_word(data['word'], data['translation_base'], message.from_user.id)
    decode_res = json.loads(res)

    state = dp.current_state(user=message.from_user.id)
    await state.reset_state()


    msg_text = fmt.text(
        fmt.text(fmt.hunderline("–°—Ç–∞—Ç—É—Å"), "=", decode_res['status']),
        fmt.text("\n–°–æ–æ–±—â–µ–Ω–∏–µ: ", fmt.hitalic(decode_res['msg']),
        fmt.text(fmt.hbold(decode_res['word']), "=", fmt.hbold(decode_res['translation_base'])),
        sep="\n")
    )

    await bot.send_message(chat_id=message.from_user.id, text=msg_text, parse_mode="HTML")
    if decode_res['status'] == 1:
        await bot.send_message(chat_id=message.from_user.id, text=f"-> –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:", reply_markup=inline_kb_YN)


"""
    #--------------- –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è ------------------
    text = MESSAGES['current_state'].format(
        current_state=await state.get_state(),
        des_current_state=DeskriptionStates[await state.get_state()],
        states=TestStates.all())
    await message.reply(MESSAGES['state_change'] + " " + f"{text}", reply=False)
"""

@dp.callback_query_handler(lambda c: c.data and c.data.startswith('btn'))
async def process_callback_kb1btn1(callback_query: types.CallbackQuery):
    code = callback_query.data[-1]
    if code.isdigit():
        code = int(code)
    if code == 2:
        await bot.answer_callback_query(callback_query.id, text='–ù–∞–∂–∞—Ç–∞ –≤—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞')
    elif code == 5:
        await bot.answer_callback_query(
            callback_query.id,
            text='–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º 5.\n–ê —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å –¥–ª–∏–Ω–æ–π –¥–æ 200 —Å–∏–º–≤–æ–ª–æ–≤ üòâ', show_alert=True)
    else:
        await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, f'–ù–∞–∂–∞—Ç–∞ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞! code={code}')

@dp.message_handler(commands=['2'])
async def process_command_2(message: types.Message):
    await message.reply("–û—Ç–ø—Ä–∞–≤–ª—è—é –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–Ω–æ–ø–∫–∏", reply_markup=inline_kb_full)


